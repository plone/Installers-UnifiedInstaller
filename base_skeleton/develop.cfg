#################################################################
#
#    Development Configuration
#    =========================
#
#    This is a buildout configuration that sets up a development
#    environment for Plone. It extends buildout.cfg.
#
#    To use this configuration, run buildout via:
#
#    bin/buildout -c develop.cfg
#
#    This specifies develop.cfg as buildout's configuration file. This configuration
#    file extends buildout.cfg, so that all the options from that file are
#    automatically included.
#
#    Included in the development configuration
#
#    Common development tools:
#
#     * zopeskel, a Python package skeleton generator with support
#       for common Plone development packages like content-type
#       and theme packages.
#
#     * mr.developer, a tool that automatically checks out source for
#       add ons from a versioning system, then adds them to your
#       development package list.
#
#     * testrunner, which provides a command-line option to run
#       test suites.
#
#     * Diazo command-line tools: diazocompile and diazorun. Useful
#       for debugging and understanding Diazo and plone.app.theming.
#       See http://docs.diazo.org/en/latest/compiler.html
#
#     * zest.releaser, a kit for managing the release cycle for Python
#       packages. See https://pypi.python.org/pypi/zest.releaser.
#
#     Common Customizations
#     =====================
#
#     Add packages to the sources managed by mr.developer by adding them to the
#     [sources] section below.
#
#     Add packages to the test suite by adding them to the "test-packages" option
#     in the [buildout] section below.


############################################
# Sources
# -------
# Specify packages under development here.
#
# See http://pypi.python.org/pypi/mr.developer for mr.developer source specifications.
# <name> = <kind> [key=value] <url> [path] [key=value]
# kind = The kind of repository. Currently supported are one of svn (>= 1.5), hg, git, cvs or fs.
#
[sources]
# Examples: to check out plonetheme.sunburst from Plone's svn, use:
# plonetheme.sunburst = svn https://svn.plone.org/svn/plone/plonetheme.sunburst/trunk
#
# To use a python package that is being developed in your src subdirectory, use:
# myproduct.betterplone = fs myproduct.betterplone


[buildout]

############################################
# Test Packages
# ----------
# Specify a list of packages that you wish to explicity include in your test suite.
# Base eggs are automatically included
#
test-packages =
#    plonetheme.sunburst


############################################
# Debug Mode
# ----------
# Most development work is done with Zope/Plone started
# in foreground mode (bin/plonectl fg), which automatically
# turns on debug mode and causes Zope/Plone to stop on
# package loading errors.
#
# Note that debug mode makes Plone run *very* slowly due to
# extra filesystem checks and granular transmission of browser resources.
#
# If you're developing Plone add-ons, you should want to see
# deprecation warnings that let you know if you're using outmoded
# methods or modules.
deprecation-warnings = on
#
# Turning on verbose security may help diagnose security bugs.
# You'll also need to disable the intercepting of "unauthorized"
# errors in the error_log via the ZMI.
verbose-security = off


############################################
# Less Commonly Changed Options
# -----------------------------
# The remainder of the buildout mainly sets up the development
# environment based on the settings above.

# we're extending buildout.cfg
extends =
    buildout.cfg

extensions +=
    mr.developer

eggs +=
    Products.DocFinderTab
    plone.reload

parts +=
    test
    diazotools
    zopeskel

# mr.developer settings:
always-checkout = force
sources = sources
auto-checkout = *


[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']

eggs =
    ${buildout:eggs}
    ${buildout:test-packages}


# Add diazo compile/run tools to bin; useful for debugging understanding
# diazo. See http://docs.diazo.org/en/latest/compiler.html
[diazotools]
recipe = zc.recipe.egg
eggs = diazo


[zopeskel]
# installs paster and Zopeskel
recipe = zc.recipe.egg
eggs =
    ZopeSkel
    Paste
    PasteDeploy
    PasteScript
    zopeskel.diazotheme
    zopeskel.dexterity
    zest.releaser
    ${buildout:eggs}

